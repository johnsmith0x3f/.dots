
# Include colorscheme.
include ./themes/tokyonight-storm.conf

# Audio bell is too noisy.
enable_audio_bell no
# Seriously, who would ever use a visual bell?
visual_bell_duration 0

#################################### Layout ####################################

# Do not remember window size.
remember_window_size no
# Always start with a 80x24 (cell) window.
initial_window_width 80c
initial_window_height 24c

# Add window padding (in pts).
window_padding_width 36

# A tab bar at the top.
tab_bar_edge top
# Slanted labels, because they look nice.
tab_bar_style slant
# Always show the tab bar, even when there's only one tab.
tab_bar_min_tabs 1

##################################### Font #####################################

# Choose font features.
font_features none
# Ligatures are gross. Always disable them.
disable_ligatures always

# Set font families.
font_family Operator Mono Book
bold_font Operator Mono Bold
italic_font Operator Mono Book Italic
bold_italic_font Operator Mono Bold Italic
# Set font size, in pts.
font_size 15.0
# Set font offset, in pts (up is positive).
modify_font baseline 1

# Map Nerd-Font icons. Don't use kitty's fallback.
# See https://github.com/ryanoasis/nerd-fonts/wiki/Glyph-Sets-and-Code-Points for details.
## Pomicons
symbol_map U+E000-U+E00A FiraMono Nerd Font Mono
## Codicons
symbol_map U+EA60-U+EBEB FiraMono Nerd Font Mono
## Powerline Symbols & Powerline Extra Symbols
symbol_map U+E0A0-U+E0A3,U+E0B0-U+E0C8,U+E0CA,U+E0CC-U+E0D7 FiraMono Nerd Font Mono
## Font Awesome & Font Awesome Extension
symbol_map U+E200-U+E2A9,U+ED00-U+F2FF FiraMono Nerd Font Mono
## Weather Icons
symbol_map U+E300-U+E3E3 FiraMono Nerd Font Mono
## Seti-UI + Custom
symbol_map U+E5FA-U+E6B7 FiraMono Nerd Font Mono
## Devicons
symbol_map U+E700-U+E8EF FiraMono Nerd Font Mono
## Font Logos
symbol_map U+F300-U+F381 FiraMono Nerd Font Mono
## Octicons
symbol_map U+F400-U+F533 FiraMono Nerd Font Mono
## Material Design Icons
symbol_map U+F0001-U+F1AF0 FiraMono Nerd Font Mono

# Map CJK glyphs.
# See https://symbl.cc/en/unicode/blocks/cjk-radicals-supplement for details.
## CJK Symbols and Punctuation
symbol_map U+3000-U+303F Source Han Sans CN
## Hiragana
symbol_map U+3040-U+309F Source Han Sans CN
## Katakana
symbol_map U+30A0-U+30FF Source Han Sans CN
## CJK Unified Ideographs
symbol_map U+4E00-U+9FFF Source Han Sans CN

################################### Keybinds ###################################

# Remove all the default keybinds.
clear_all_shortcuts yes

# Reload config.
map ctrl+shift+f5 reload_config

# Tab {{{

# Open a new tab.
map alt+t new_tab
# Set the tab title.
map alt+shift+t set_tab_title
# Cycle through tabs.
map alt+tab next_tab
map alt+shift+tab previous_tab
# Hop to a specific tab.
map alt+1 goto_tab 1
map alt+2 goto_tab 2
map alt+3 goto_tab 3
map alt+4 goto_tab 4
# Move tabs around.
map alt+left move_tab_backward
map alt+right move_tab_forward
# Close tabs.
map alt+c close_tab

# }}}

# Window {{{

# Spawn a new window.
map alt+enter new_window
# Cycle through windows.
map alt+] next_window
map alt+[ previous_window
# Move the focused window to top (main).
map alt+m move_window_to_top
# Close the focused window.
map alt+x close_window

# }}}

# Scroll {{{

# Scroll by lines.
map alt+down scroll_line_down
map alt+up scroll_line_up
# Scroll by prompts.
map alt+left scroll_to_prompt -1
map alt+right scroll_to_prompt 1
# Scroll by pages.
map alt+b scroll_page_up
map alt+f scroll_page_down
map alt+page_up scroll_page_up
map alt+page_down scroll_page_down
# Scroll to the edges.
map alt+g scroll_home
map alt+shift+g scroll_end
map alt+home scroll_home
map alt+end scroll_end

# }}}

# Copy to clipboard.
map ctrl+shift+c copy_to_clipboard
# Paste from clipboard.
map ctrl+shift+v paste_from_clipboard

#: Window management {{{

#: Move window forward

# map kitty_mod+f move_window_forward

#: Move window backward

# map kitty_mod+b move_window_backward

#: Move window to top

# map kitty_mod+` move_window_to_top

#: Start resizing window

# map kitty_mod+r start_resizing_window
# map cmd+r       start_resizing_window

#: First window

# map kitty_mod+1 first_window
# map cmd+1       first_window

#: Second window

# map kitty_mod+2 second_window
# map cmd+2       second_window

#: Third window

# map kitty_mod+3 third_window
# map cmd+3       third_window

#: Fourth window

# map kitty_mod+4 fourth_window
# map cmd+4       fourth_window

#: Fifth window

# map kitty_mod+5 fifth_window
# map cmd+5       fifth_window

#: Sixth window

# map kitty_mod+6 sixth_window
# map cmd+6       sixth_window

#: Seventh window

# map kitty_mod+7 seventh_window
# map cmd+7       seventh_window

#: Eighth window

# map kitty_mod+8 eighth_window
# map cmd+8       eighth_window

#: Ninth window

# map kitty_mod+9 ninth_window
# map cmd+9       ninth_window

#: Tenth window

# map kitty_mod+0 tenth_window

#: Visually select and focus window

# map kitty_mod+f7 focus_visible_window

#::  Display overlay numbers and alphabets on the window, and switch
#::  the focus to the window when you press the key. When there are
#::  only two windows, the focus will be switched directly without
#::  displaying the overlay. You can change the overlay characters and
#::  their order with option visual_window_select_characters.

#: Visually swap window with another

# map kitty_mod+f8 swap_with_window

#::  Works like focus_visible_window above, but swaps the window.

#: }}}

#: Miscellaneous {{{

#: Show documentation

# map kitty_mod+f1 show_kitty_doc overview

#: Toggle fullscreen

# map kitty_mod+f11 toggle_fullscreen
# map ctrl+cmd+f    toggle_fullscreen

#: Toggle maximized

# map kitty_mod+f10 toggle_maximized

#: Toggle macOS secure keyboard entry

# map opt+cmd+s toggle_macos_secure_keyboard_entry

#: Unicode input

# map kitty_mod+u    kitten unicode_input
# map ctrl+cmd+space kitten unicode_input

#: Edit config file

# map kitty_mod+f2 edit_config_file
# map cmd+,        edit_config_file

#: Open the kitty command shell

# map kitty_mod+escape kitty_shell window

#::  Open the kitty shell in a new window / tab / overlay / os_window
#::  to control kitty using commands.

#: Increase background opacity

# map kitty_mod+a>m set_background_opacity +0.1

#: Decrease background opacity

# map kitty_mod+a>l set_background_opacity -0.1

#: Make background fully opaque

# map kitty_mod+a>1 set_background_opacity 1

#: Reset background opacity

# map kitty_mod+a>d set_background_opacity default

#: Reset the terminal

# map kitty_mod+delete clear_terminal reset active
# map opt+cmd+r        clear_terminal reset active

#::  You can create shortcuts to clear/reset the terminal. For
#::  example::

#::      # Reset the terminal
#::      map f1 clear_terminal reset active
#::      # Clear the terminal screen by erasing all contents
#::      map f1 clear_terminal clear active
#::      # Clear the terminal scrollback by erasing it
#::      map f1 clear_terminal scrollback active
#::      # Scroll the contents of the screen into the scrollback
#::      map f1 clear_terminal scroll active
#::      # Clear everything on screen up to the line with the cursor or the start of the current prompt (needs shell integration)
#::      map f1 clear_terminal to_cursor active
#::      # Same as above except cleared lines are moved into scrollback
#::      map f1 clear_terminal to_cursor_scroll active

#::  If you want to operate on all kitty windows instead of just the
#::  current one, use all instead of active.

#::  Some useful functions that can be defined in the shell rc files
#::  to perform various kinds of clearing of the current window:

#::  .. code-block:: sh

#::      clear-only-screen() {
#::          printf "\e[H\e[2J"
#::      }

#::      clear-screen-and-scrollback() {
#::          printf "\e[H\e[3J"
#::      }

#::      clear-screen-saving-contents-in-scrollback() {
#::          printf "\e[H\e[22J"
#::      }

#::  For instance, using these escape codes, it is possible to remap
#::  Ctrl+L to both scroll the current screen contents into the
#::  scrollback buffer and clear the screen, instead of just clearing
#::  the screen. For ZSH, in ~/.zshrc, add:

#::  .. code-block:: zsh

#::      ctrl_l() {
#::          builtin print -rn -- $'\r\e[0J\e[H\e[22J' >"$TTY"
#::          builtin zle .reset-prompt
#::          builtin zle -R
#::      }
#::      zle -N ctrl_l
#::      bindkey '^l' ctrl_l

#::  Alternatively, you can just add map ctrl+l clear_terminal
#::  to_cursor_scroll active to kitty.conf which works with no changes
#::  to the shell rc files, but only clears up to the prompt, it does
#::  not clear anytext at the prompt itself.

#: Clear up to cursor line

# map cmd+k clear_terminal to_cursor active

#: Reload kitty.conf

# map kitty_mod+f5 load_config_file
# map ctrl+cmd+,   load_config_file

#::  Reload kitty.conf, applying any changes since the last time it
#::  was loaded. Note that a handful of options cannot be dynamically
#::  changed and require a full restart of kitty. Particularly, when
#::  changing shortcuts for actions located on the macOS global menu
#::  bar, a full restart is needed. You can also map a keybinding to
#::  load a different config file, for example::

#::      map f5 load_config /path/to/alternative/kitty.conf

#::  Note that all options from the original kitty.conf are discarded,
#::  in other words the new configuration *replace* the old ones.

#: Debug kitty configuration

# map kitty_mod+f6 debug_config
# map opt+cmd+,    debug_config

#::  Show details about exactly what configuration kitty is running
#::  with and its host environment. Useful for debugging issues.

#: Send arbitrary text on key presses

#::  E.g. map ctrl+shift+alt+h send_text all Hello World

#::  You can tell kitty to send arbitrary (UTF-8) encoded text to the
#::  client program when pressing specified shortcut keys. For
#::  example::

#::      map ctrl+alt+a send_text all Special text

#::  This will send "Special text" when you press the Ctrl+Alt+A key
#::  combination. The text to be sent decodes ANSI C escapes
#::  <https://www.gnu.org/software/bash/manual/html_node/ANSI_002dC-
#::  Quoting.html> so you can use escapes like \e to send control
#::  codes or \u21fb to send Unicode characters (or you can just input
#::  the Unicode characters directly as UTF-8 text). You can use
#::  `kitten show-key` to get the key escape codes you want to
#::  emulate.

#::  The first argument to send_text is the keyboard modes in which to
#::  activate the shortcut. The possible values are normal,
#::  application, kitty or a comma separated combination of them. The
#::  modes normal and application refer to the DECCKM cursor key mode
#::  for terminals, and kitty refers to the kitty extended keyboard
#::  protocol. The special value all means all of them.

#::  Some more examples::

#::      # Output a word and move the cursor to the start of the line (like typing and pressing Home)
#::      map ctrl+alt+a send_text normal Word\e[H
#::      map ctrl+alt+a send_text application Word\eOH
#::      # Run a command at a shell prompt (like typing the command and pressing Enter)
#::      map ctrl+alt+a send_text normal,application some command with arguments\r

#: Open kitty Website

# map shift+cmd+/ open_url https://sw.kovidgoyal.net/kitty/

#: Hide macOS kitty application

# map cmd+h hide_macos_app

#: Hide macOS other applications

# map opt+cmd+h hide_macos_other_apps

#: Minimize macOS window

# map cmd+m minimize_macos_window

#: Quit kitty

# map cmd+q quit

#: }}}

